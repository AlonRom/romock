# CI/CD Pipeline for RoMock MAUI Library
# This workflow handles building, testing, semantic versioning, and publishing

name: CI/CD Pipeline

# Trigger conditions for the workflow
on:
  push:
    branches: [ main ]          # Run on pushes to main branch

# Global environment variables
env:
  DOTNET_VERSION: '8.0.x'       # .NET version to use

jobs:
  # Job 1: Build and Test
  # This job builds the solution and runs all tests
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest      # Use Ubuntu runner for consistency
    
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0          # Fetch full history for semantic versioning

    # Step 2: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Step 3: Restore NuGet packages (only library and tests)
    - name: Restore dependencies
      run: |
        dotnet restore src/RoMock.Library/RoMock.Library.csproj
        dotnet restore tests/RoMock.UnitTests/RoMock.UnitTests.csproj

    # Step 4: Build the solution
    - name: Build solution
      run: |
        dotnet build src/RoMock.Library/RoMock.Library.csproj --configuration Release --no-restore
        dotnet build tests/RoMock.UnitTests/RoMock.UnitTests.csproj --configuration Release --no-restore

    # Step 5: Run unit tests
    - name: Run tests
      run: dotnet test tests/RoMock.UnitTests/RoMock.UnitTests.csproj --configuration Release --no-build

  # Job 2: Semantic Versioning
  # This job analyzes commit messages and determines the next version
  semantic-version:
    name: Semantic Versioning
    runs-on: ubuntu-latest
    needs: build-and-test        # Wait for build-and-test to complete
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    permissions:                 # Required permissions for semantic-release
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:                     # Output variables for other jobs
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
    # Step 1: Checkout with full history
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0          # Required for semantic versioning
        token: ${{ secrets.GITHUB_TOKEN }}  # Token for creating releases
        persist-credentials: false  # Don't persist credentials

    # Step 2: Setup Node.js for semantic-release
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Step 3: Install npm dependencies
    - name: Install dependencies
      run: npm install

    # Step 4: Run semantic-release to analyze commits and create releases
    - name: Semantic Release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_ENV: production

    # Step 5: Debug - Show outputs
    - name: Debug - Show outputs
      run: |
        echo "new_release_published: ${{ steps.semantic.outputs.new_release_published }}"
        echo "new_release_version: ${{ steps.semantic.outputs.new_release_version }}"

  # Job 3: Build NuGet Package
  # This job creates the NuGet package with the new version
  build-package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: [build-and-test, semantic-version]  # Wait for both previous jobs
    if: github.ref == 'refs/heads/main'  # Always run on main branch
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Step 3: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore src/RoMock.Library/RoMock.Library.csproj

    # Step 4: Update version in the .csproj file
    - name: Update version in csproj
      run: |
        # Get the next version that semantic-release would create
        # We need to analyze the commits to determine the next version
        COMMIT_MSG=$(git log --oneline -1 --format="%s")
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/v//' || echo "0.1.0")
        
        # Simple version bump logic based on commit message
        if [[ "$COMMIT_MSG" == feat:* ]]; then
          # Minor version bump
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEXT_VERSION="$major.$((minor + 1)).0"
        elif [[ "$COMMIT_MSG" == fix:* ]]; then
          # Patch version bump
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEXT_VERSION="$major.$minor.$((patch + 1))"
        else
          # No version bump needed
          NEXT_VERSION="$CURRENT_VERSION"
        fi
        
        echo "Current version: $CURRENT_VERSION"
        echo "Next version: $NEXT_VERSION"
        
        # Update the .csproj file
        sed 's|<Version>.*</Version>|<Version>'$NEXT_VERSION'</Version>|g' src/RoMock.Library/RoMock.Library.csproj > temp.csproj && mv temp.csproj src/RoMock.Library/RoMock.Library.csproj
        
        # Update the example project
        sed 's|<PackageReference Include="RoMock\.Library" Version="[^"]*" />|<PackageReference Include="RoMock.Library" Version="'$NEXT_VERSION'" />|g' example/RoMock.Example.App/RoMock.Example.App.csproj > temp.example.csproj && mv temp.example.csproj example/RoMock.Example.App/RoMock.Example.App.csproj
        
        echo "Updated version to $NEXT_VERSION"

    # Step 5: Build the project first
    - name: Build project
      run: dotnet build src/RoMock.Library/RoMock.Library.csproj --configuration Release --no-restore

    # Step 6: Build the NuGet package
    - name: Build NuGet package
      run: dotnet pack src/RoMock.Library/RoMock.Library.csproj --configuration Release --output ./nupkgs

    # Step 7: Upload package as artifact for the publish job
    - name: Upload NuGet package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkgs/*.nupkg

  # Job 4: Publish to NuGet
  # This job publishes the package to NuGet.org
  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [semantic-version, build-package]  # Wait for semantic versioning and package build
    if: github.ref == 'refs/heads/main'  # Always run on main branch
    
    steps:
    # Step 1: Download the package artifact
    - name: Download NuGet package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkgs

    # Step 2: Publish to NuGet.org
    - name: Publish to NuGet
      run: |
        if [ -z "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "Error: NUGET_API_KEY secret is not set"
          exit 1
        fi
        dotnet nuget push ./nupkgs/*.nupkg --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate 